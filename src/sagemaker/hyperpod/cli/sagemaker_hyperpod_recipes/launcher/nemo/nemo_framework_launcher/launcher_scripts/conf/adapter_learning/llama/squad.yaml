run:
  name: ${.task_name}_${.model_train_name}
  time_limit: "04:00:00"
  dependency: "singleton"
  convert_name: convert_nemo
  model_train_name: llama_7b
  convert_dir: ${base_results_dir}/${adapter_learning.run.model_train_name}/${adapter_learning.run.convert_name}
  task_name: "squad"
  results_dir: ${base_results_dir}/${.model_train_name}/adapter_learning_${.task_name}

trainer:
  devices: 8
  num_nodes: 1
  accelerator: gpu
  precision: bf16
  logger: False
  enable_checkpointing: False
  replace_sampler_ddp: False
  max_epochs: 4
  max_steps: -1
  log_every_n_steps: 10
  val_check_interval: 0.1
  accumulate_grad_batches: 1
  gradient_clip_val: 1.0
  resume_from_checkpoint: null # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.


exp_manager:
  explicit_log_dir: ${adapter_learning.run.results_dir}/results
  exp_dir: null
  name: megatron_llama_adapter
  create_wandb_logger: True
  wandb_logger_kwargs:
    project: nemo_llama_adapter
    name: ${adapter_learning.run.name}
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: val_loss
    save_top_k: 5
    mode: min
    save_nemo_on_train_end: False
    filename: "megatron_llama_adapter_learn--{val_loss:.3f}-{step}"
    model_parallel_size: ${adapter_learning.model.model_parallel_size}
    save_best_model: True

model:
  seed: 1234
  nemo_path: ${adapter_learning.run.results_dir}/results/megatron_gpt_adapter.nemo # .nemo filename/absolute path to where the virtual prompt model parameters will be saved
  virtual_prompt_style: 'no-prompts' # adapter tuning requires no virtual prompts
  encoder_seq_length: 2048 
  gradient_as_bucket_view: false
  tensor_model_parallel_size: 4 # intra-layer model parallelism
  pipeline_model_parallel_size: 1 # inter-layer model parallelism
  model_parallel_size: ${multiply:${.tensor_model_parallel_size}, ${.pipeline_model_parallel_size}}
  global_batch_size: 64
  micro_batch_size: 8

  restore_path: null # Path to an existing adapter .nemo model you wish to add new tasks to or run inference with
  language_model_path: ${adapter_learning.run.convert_dir}/results/megatron_llama.nemo # Path to the GPT language model .nemo file, always required
  existing_tasks: [] # List of tasks the model has already been p-tuned/prompt-tuned for, needed when a restore path is given
  new_tasks: ["squad"] # List of new tasknames to be prompt-tuned

  task_templates: # Add more/replace tasks as needed, these are just examples
  - taskname: "squad" 
    prompt_template: "context: {context} question: {question} answer: {answer}" 
    total_virtual_tokens: 0
    virtual_token_splits: []
    truncate_field: null
    answer_only_loss: True
    answer_field: "answer"

  adapter_tuning:
    type: 'parallel_adapter' # this should be either 'parallel_adapter' or 'linear_adapter'
    adapter_dim: 16
    adapter_dropout: 0.1
    norm_position: 'pre' # This can be set to 'pre' or 'post', 'pre' is normally what is used.
    column_init_method: 'xavier' # IGNORED if linear_adapter is used, options: xavier, zero or normal
    row_init_method: 'zero' # IGNORED if linear_adapter is used, options: xavier, zero or normal
    norm_type: 'mixedfusedlayernorm' # IGNORED if layer_adapter is used,  options are ['layernorm', 'mixedfusedlayernorm']

  data:
    train_ds:
      - ${data_dir}/prompt_data/v1.1/squad_train.jsonl # multiple prompt dataset can be given at the same time
    validation_ds:
      - ${data_dir}/prompt_data/v1.1/squad_val.jsonl
    add_eos: True
    shuffle: True
    num_workers: 4
    pin_memory: True


  optim:
    name: fused_adam
    lr: 1e-4
    weight_decay: 0.01 
    betas: 
    - 0.9
    - 0.98
    sched:
      name: CosineAnnealing
      warmup_steps: 50
      constant_steps: 0 # Constant steps should also be 0 when min_lr=0
      min_lr: 0.0 # min_lr must be 0.0 for prompt learning
      monitor: val_loss
      reduce_on_plateau: false
