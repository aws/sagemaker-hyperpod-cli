run:
  name: ${.task_name}_${.model_train_name}
  time_limit: "04:00:00"
  dependency: "singleton"
  convert_name: convert_nemo
  model_train_name: t5_220m
  convert_dir: ${base_results_dir}/${prompt_learning.run.model_train_name}/${prompt_learning.run.convert_name}
  task_name: "squad"
  results_dir: ${base_results_dir}/${.model_train_name}/prompt_learning_${.task_name}

trainer:
  devices: 8
  num_nodes: 1
  accelerator: gpu
  precision: bf16
  logger: False
  enable_checkpointing: False
  use_distributed_sampler: False
  max_epochs: 10
  max_steps: -1
  log_every_n_steps: 10
  val_check_interval: 1.0
  accumulate_grad_batches: 1
  gradient_clip_val: 1.0
  resume_from_checkpoint: null

exp_manager:
  explicit_log_dir: ${prompt_learning.run.results_dir}/results
  exp_dir: null
  name: megatron_t5_prompt
  create_wandb_logger: False
  wandb_logger_kwargs:
    project: nemo_t5_prompt
    name: ${prompt_learning.run.name}
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: val_loss
    save_top_k: 5
    mode: min
    save_nemo_on_train_end: False
    filename: "megatron_t5_prompt_learning--{val_loss:.3f}-{step}"
    model_parallel_size: ${prompt_learning.model.model_parallel_size}
    save_best_model: True

model:
  seed: 1234
  nemo_path: ${prompt_learning.run.results_dir}/results/megatron_t5_prompt.nemo
  virtual_prompt_style: "p-tuning" # one of 'prompt-tuning', 'p-tuning', or 'inference'
  tensor_model_parallel_size: 1
  pipeline_model_parallel_size: 1
  pipeline_model_parallel_split_rank: ${divide_floor:${.pipeline_model_parallel_size}, 2}
  model_parallel_size: ${multiply:${.tensor_model_parallel_size}, ${.pipeline_model_parallel_size}}
  global_batch_size: 128
  micro_batch_size: 16

  restore_path: null # Path to an existing p-tuned/prompt tuned .nemo model you wish to add new tasks to or run inference with
  language_model_path:  ${prompt_learning.run.convert_dir}/results/megatron_t5.nemo # Path to the GPT language model .nemo file, always required
  existing_tasks: []
  new_tasks: ["squad"]

  task_templates: # task_templates for all existing_tasks and new_tasks are required.
  - taskname: "squad" # The task name
    prompt_template: "<|VIRTUAL_PROMPT_0|> Question: {question}? Context: {context} Answer: {answer}"
    total_virtual_tokens: 100 # Sum of tokens in virtual_token_splits must add to this number. Can differ between new and existing tasks, but must match across all new tasks being tuned at the same time.
    virtual_token_splits: [100] # number of virtual tokens to be inserted at each VIRTUAL PROMPT location, must add to total_virtual_tokens
    truncate_field: "context" # The {field} in the prompt template whose text will be truncated if the input is too long, if null, inputs that are too long will just be skipped.
    answer_field: "answer" # Answer/Target field

  p_tuning: # P-tuning specific params
    encoder_type: "tpmlp" # ['tpmlp', 'lstm', 'biglstm', 'mlp'] 
    dropout: 0.0
    num_layers: 2  # number of layers for MLP or LSTM layers. Note, it has no effect for tpmlp currently as it always assumes it is two layers.
    encoder_hidden: 2048 # encoder hidden for biglstm and tpmlp
    init_std: 0.023  # init std for tpmlp layers

  data:
    train_ds:
      - ${data_dir}/prompt_data/v1.1/squad_train.jsonl # multiple prompt dataset can be given at the same time
    validation_ds:
      - ${data_dir}/prompt_data/v1.1/squad_val.jsonl
    add_eos: True
    shuffle: True
    num_workers: 4
    pin_memory: True

  optim:
    name: fused_adam
    lr: 1e-3
    weight_decay: 0.01
    betas:
    - 0.9
    - 0.98
    sched:
      name: CosineAnnealing
      warmup_steps: 50
      constant_steps: 0
      min_lr: 0.0 # has to be zero
      monitor: val_loss
      reduce_on_plateau: false