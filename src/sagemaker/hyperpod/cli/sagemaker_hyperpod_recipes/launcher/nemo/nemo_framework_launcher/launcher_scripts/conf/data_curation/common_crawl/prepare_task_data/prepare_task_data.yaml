run:
  name: 'prepare-task-data'
  results_dir: ${data_curation.run.results_dir}/${.name}
  dependency: "singleton"
  time_limit: "04:00:00"
  nodes: 2
  node_type: cpu

output_task_ngrams: ${.run.results_dir}/task_ngrams.pkl
# The below flag skips computation of task n-grams if the file above is already present
# Set to False if you want to recompute task n-grams with different tasks
use_ngram_cache: True

lm_tasks_config:
  tasks:
    # The Python modules below define language model downstream evaluation
    # task data. If one of the below tasks is specified, N-grams will 
    # be constructed from the documents that make up the task data
    # using the script prepare_task_data.
    # find_matching_ngrams will then search for these N-grams
    # in the training documents, and remove_matching_ngrams will
    # split the documents based on matches
    - name: nemo_curator.tasks.Winogrande
      params: {}
    - name: nemo_curator.tasks.Squad
      params: {}
    - name: nemo_curator.tasks.TriviaQA
      params: {}
    - name: nemo_curator.tasks.Quac
      params: {}
    - name: nemo_curator.tasks.WebQA
      params: {}
    - name: nemo_curator.tasks.Race
      params: {}
    - name: nemo_curator.tasks.Drop
      params: {}
    - name: nemo_curator.tasks.WiC
      params: {}
    - name: nemo_curator.tasks.PIQA
      params: {}
    - name: nemo_curator.tasks.ArcEasy
      params: {}
    - name: nemo_curator.tasks.ArcChallenge
      params: {}
    - name: nemo_curator.tasks.OpenBookQA
      params: {}
    - name: nemo_curator.tasks.BoolQ
      params: {}
    - name: nemo_curator.tasks.Copa
      params: {}
    - name: nemo_curator.tasks.RTE
      params: {}
    - name: nemo_curator.tasks.MultiRC
      params: {}
    - name: nemo_curator.tasks.WSC
      params: {}
    - name: nemo_curator.tasks.CB
      params: {}
    - name: nemo_curator.tasks.ANLI
      params: {}
    - name: nemo_curator.tasks.Record
      params: {}
